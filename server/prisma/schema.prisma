 // This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  name      String
  role      Role      @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  orders    Order[]
  cartItems CartItem[]
  reviews   Review[]
  wishlist  WishlistItem[]
  questions Question[]
  answers   Answer[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  imageUrl  String?
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String
  price       Int       // cents
  imageUrl    String?
  images      String?   // JSON array of additional image URLs
  categoryId  Int
  category    Category  @relation(fields: [categoryId], references: [id])
  stock       Int       @default(0)
  specs       String?   // JSON string for specifications
  variants    Variant[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orderItems  OrderItem[]
  cartItems   CartItem[]
  reviews     Review[]
  wishedBy    WishlistItem[]
  questions   Question[]
}

model Order {
  id         Int         @id @default(autoincrement())
  userId     Int
  user       User        @relation(fields: [userId], references: [id])
  status     OrderStatus @default(PENDING)
  total      Int         // cents
  address    String?
  phone      String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  items      OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  unitPrice Int     // cents
}

model CartItem {
  id        Int     @id @default(autoincrement())
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int     @default(1)
  createdAt DateTime @default(now())
}

enum Role {
  SUPER_ADMIN
  ADMIN
  USER
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELED
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  rating    Int      @default(5)
  comment   String?
  photos    String?  // JSON array of image URLs/base64
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Variant {
  id         Int      @id @default(autoincrement())
  productId  Int
  color      String?
  size       String?
  stock      Int      @default(0)
  priceDelta Int?     // cents to add/subtract from base price

  product    Product  @relation(fields: [productId], references: [id])
}

model Question {
  id         Int      @id @default(autoincrement())
  userId     Int
  productId  Int
  content    String
  createdAt  DateTime @default(now())
  answers    Answer[]

  user       User     @relation(fields: [userId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
}

model Answer {
  id         Int      @id @default(autoincrement())
  questionId Int
  userId     Int
  content    String
  createdAt  DateTime @default(now())

  question   Question @relation(fields: [questionId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model WishlistItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}
